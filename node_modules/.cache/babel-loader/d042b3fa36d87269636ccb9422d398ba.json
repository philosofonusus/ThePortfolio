{"ast":null,"code":"/**\n * Defaults & options\n * @returns {object} Typed defaults & options\n * @public\n */\nvar defaults = {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: ['These are the default values...', 'You know what you should do?', 'Use your own!', 'Have a great day!'],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * Before it begins typing\n   * @param {Typed} self\n   */\n  onBegin: function onBegin(self) {},\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: function onComplete(self) {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: function preStringTyped(arrayPos, self) {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: function onStringTyped(arrayPos, self) {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: function onLastStringBackspaced(self) {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: function onTypingPaused(arrayPos, self) {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: function onTypingResumed(arrayPos, self) {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: function onReset(self) {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: function onStop(arrayPos, self) {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: function onStart(arrayPos, self) {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: function onDestroy(self) {}\n};\nexport default defaults;","map":{"version":3,"sources":["/home/tentacle/Desktop/univers-prod/node_modules/typed.js/src/defaults.js"],"names":["defaults","strings","stringsElement","typeSpeed","startDelay","backSpeed","smartBackspace","shuffle","backDelay","fadeOut","fadeOutClass","fadeOutDelay","loop","loopCount","Infinity","showCursor","cursorChar","autoInsertCss","attr","bindInputFocusEvents","contentType","onBegin","self","onComplete","preStringTyped","arrayPos","onStringTyped","onLastStringBackspaced","onTypingPaused","onTypingResumed","onReset","onStop","onStart","onDestroy"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,IAAMA,QAAQ,GAAG;AACf;AACF;AACA;AACA;AACEC,EAAAA,OAAO,EAAE,CACP,iCADO,EAEP,8BAFO,EAGP,eAHO,EAIP,mBAJO,CALM;AAWfC,EAAAA,cAAc,EAAE,IAXD;;AAaf;AACF;AACA;AACEC,EAAAA,SAAS,EAAE,CAhBI;;AAkBf;AACF;AACA;AACEC,EAAAA,UAAU,EAAE,CArBG;;AAuBf;AACF;AACA;AACEC,EAAAA,SAAS,EAAE,CA1BI;;AA4Bf;AACF;AACA;AACEC,EAAAA,cAAc,EAAE,IA/BD;;AAiCf;AACF;AACA;AACEC,EAAAA,OAAO,EAAE,KApCM;;AAsCf;AACF;AACA;AACEC,EAAAA,SAAS,EAAE,GAzCI;;AA2Cf;AACF;AACA;AACA;AACA;AACEC,EAAAA,OAAO,EAAE,KAhDM;AAiDfC,EAAAA,YAAY,EAAE,gBAjDC;AAkDfC,EAAAA,YAAY,EAAE,GAlDC;;AAoDf;AACF;AACA;AACA;AACEC,EAAAA,IAAI,EAAE,KAxDS;AAyDfC,EAAAA,SAAS,EAAEC,QAzDI;;AA2Df;AACF;AACA;AACA;AACA;AACEC,EAAAA,UAAU,EAAE,IAhEG;AAiEfC,EAAAA,UAAU,EAAE,GAjEG;AAkEfC,EAAAA,aAAa,EAAE,IAlEA;;AAoEf;AACF;AACA;AACA;AACEC,EAAAA,IAAI,EAAE,IAxES;;AA0Ef;AACF;AACA;AACEC,EAAAA,oBAAoB,EAAE,KA7EP;;AA+Ef;AACF;AACA;AACEC,EAAAA,WAAW,EAAE,MAlFE;;AAoFf;AACF;AACA;AACA;AACEC,EAAAA,OAAO,EAAE,iBAACC,IAAD,EAAU,CAAE,CAxFN;;AA0Ff;AACF;AACA;AACA;AACEC,EAAAA,UAAU,EAAE,oBAACD,IAAD,EAAU,CAAE,CA9FT;;AAgGf;AACF;AACA;AACA;AACA;AACEE,EAAAA,cAAc,EAAE,wBAACC,QAAD,EAAWH,IAAX,EAAoB,CAAE,CArGvB;;AAuGf;AACF;AACA;AACA;AACA;AACEI,EAAAA,aAAa,EAAE,uBAACD,QAAD,EAAWH,IAAX,EAAoB,CAAE,CA5GtB;;AA8Gf;AACF;AACA;AACA;AACEK,EAAAA,sBAAsB,EAAE,gCAACL,IAAD,EAAU,CAAE,CAlHrB;;AAoHf;AACF;AACA;AACA;AACA;AACEM,EAAAA,cAAc,EAAE,wBAACH,QAAD,EAAWH,IAAX,EAAoB,CAAE,CAzHvB;;AA2Hf;AACF;AACA;AACA;AACA;AACEO,EAAAA,eAAe,EAAE,yBAACJ,QAAD,EAAWH,IAAX,EAAoB,CAAE,CAhIxB;;AAkIf;AACF;AACA;AACA;AACEQ,EAAAA,OAAO,EAAE,iBAACR,IAAD,EAAU,CAAE,CAtIN;;AAwIf;AACF;AACA;AACA;AACA;AACES,EAAAA,MAAM,EAAE,gBAACN,QAAD,EAAWH,IAAX,EAAoB,CAAE,CA7If;;AA+If;AACF;AACA;AACA;AACA;AACEU,EAAAA,OAAO,EAAE,iBAACP,QAAD,EAAWH,IAAX,EAAoB,CAAE,CApJhB;;AAsJf;AACF;AACA;AACA;AACEW,EAAAA,SAAS,EAAE,mBAACX,IAAD,EAAU,CAAE;AA1JR,CAAjB;AA6JA,eAAetB,QAAf","sourcesContent":["/**\n * Defaults & options\n * @returns {object} Typed defaults & options\n * @public\n */\n\nconst defaults = {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!'\n  ],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * Before it begins typing\n   * @param {Typed} self\n   */\n  onBegin: (self) => {},\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: (self) => {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: (self) => {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: (self) => {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: (self) => {}\n};\n\nexport default defaults;\n"]},"metadata":{},"sourceType":"module"}