{"ast":null,"code":"import _classCallCheck from \"/home/tentacle/Desktop/univers-prod/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tentacle/Desktop/univers-prod/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * TODO: These methods can probably be combined somehow\n * Parse HTML tags & HTML Characters\n */\nvar HTMLParser = /*#__PURE__*/function () {\n  function HTMLParser() {\n    _classCallCheck(this, HTMLParser);\n  }\n\n  _createClass(HTMLParser, [{\n    key: \"typeHtmlChars\",\n\n    /**\n     * Type HTML tags & HTML Characters\n     * @param {string} curString Current string\n     * @param {number} curStrPos Position in current string\n     * @param {Typed} self instance of Typed\n     * @returns {number} a new string position\n     * @private\n     */\n    value: function typeHtmlChars(curString, curStrPos, self) {\n      if (self.contentType !== 'html') return curStrPos;\n      var curChar = curString.substr(curStrPos).charAt(0);\n\n      if (curChar === '<' || curChar === '&') {\n        var endTag = '';\n\n        if (curChar === '<') {\n          endTag = '>';\n        } else {\n          endTag = ';';\n        }\n\n        while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {\n          curStrPos++;\n\n          if (curStrPos + 1 > curString.length) {\n            break;\n          }\n        }\n\n        curStrPos++;\n      }\n\n      return curStrPos;\n    }\n    /**\n     * Backspace HTML tags and HTML Characters\n     * @param {string} curString Current string\n     * @param {number} curStrPos Position in current string\n     * @param {Typed} self instance of Typed\n     * @returns {number} a new string position\n     * @private\n     */\n\n  }, {\n    key: \"backSpaceHtmlChars\",\n    value: function backSpaceHtmlChars(curString, curStrPos, self) {\n      if (self.contentType !== 'html') return curStrPos;\n      var curChar = curString.substr(curStrPos).charAt(0);\n\n      if (curChar === '>' || curChar === ';') {\n        var endTag = '';\n\n        if (curChar === '>') {\n          endTag = '<';\n        } else {\n          endTag = '&';\n        }\n\n        while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {\n          curStrPos--;\n\n          if (curStrPos < 0) {\n            break;\n          }\n        }\n\n        curStrPos--;\n      }\n\n      return curStrPos;\n    }\n  }]);\n\n  return HTMLParser;\n}();\n\nexport { HTMLParser as default };\nexport var htmlParser = new HTMLParser();","map":{"version":3,"sources":["/home/tentacle/Desktop/univers-prod/node_modules/typed.js/src/html-parser.js"],"names":["HTMLParser","curString","curStrPos","self","contentType","curChar","substr","charAt","endTag","length","htmlParser"],"mappings":";;;AAAA;AACA;AACA;AACA;IAEqBA,U;;;;;;;;AACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;kCAEgBC,S,EAAWC,S,EAAWC,I,EAAM;AACxC,UAAIA,IAAI,CAACC,WAAL,KAAqB,MAAzB,EAAiC,OAAOF,SAAP;AACjC,UAAMG,OAAO,GAAGJ,SAAS,CAACK,MAAV,CAAiBJ,SAAjB,EAA4BK,MAA5B,CAAmC,CAAnC,CAAhB;;AACA,UAAIF,OAAO,KAAK,GAAZ,IAAmBA,OAAO,KAAK,GAAnC,EAAwC;AACtC,YAAIG,MAAM,GAAG,EAAb;;AACA,YAAIH,OAAO,KAAK,GAAhB,EAAqB;AACnBG,UAAAA,MAAM,GAAG,GAAT;AACD,SAFD,MAEO;AACLA,UAAAA,MAAM,GAAG,GAAT;AACD;;AACD,eAAOP,SAAS,CAACK,MAAV,CAAiBJ,SAAS,GAAG,CAA7B,EAAgCK,MAAhC,CAAuC,CAAvC,MAA8CC,MAArD,EAA6D;AAC3DN,UAAAA,SAAS;;AACT,cAAIA,SAAS,GAAG,CAAZ,GAAgBD,SAAS,CAACQ,MAA9B,EAAsC;AACpC;AACD;AACF;;AACDP,QAAAA,SAAS;AACV;;AACD,aAAOA,SAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;uCACqBD,S,EAAWC,S,EAAWC,I,EAAM;AAC7C,UAAIA,IAAI,CAACC,WAAL,KAAqB,MAAzB,EAAiC,OAAOF,SAAP;AACjC,UAAMG,OAAO,GAAGJ,SAAS,CAACK,MAAV,CAAiBJ,SAAjB,EAA4BK,MAA5B,CAAmC,CAAnC,CAAhB;;AACA,UAAIF,OAAO,KAAK,GAAZ,IAAmBA,OAAO,KAAK,GAAnC,EAAwC;AACtC,YAAIG,MAAM,GAAG,EAAb;;AACA,YAAIH,OAAO,KAAK,GAAhB,EAAqB;AACnBG,UAAAA,MAAM,GAAG,GAAT;AACD,SAFD,MAEO;AACLA,UAAAA,MAAM,GAAG,GAAT;AACD;;AACD,eAAOP,SAAS,CAACK,MAAV,CAAiBJ,SAAS,GAAG,CAA7B,EAAgCK,MAAhC,CAAuC,CAAvC,MAA8CC,MAArD,EAA6D;AAC3DN,UAAAA,SAAS;;AACT,cAAIA,SAAS,GAAG,CAAhB,EAAmB;AACjB;AACD;AACF;;AACDA,QAAAA,SAAS;AACV;;AACD,aAAOA,SAAP;AACD;;;;;;SA1DkBF,U;AA6DrB,OAAO,IAAIU,UAAU,GAAG,IAAIV,UAAJ,EAAjB","sourcesContent":["/**\n * TODO: These methods can probably be combined somehow\n * Parse HTML tags & HTML Characters\n */\n\nexport default class HTMLParser {\n  /**\n   * Type HTML tags & HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n\n  typeHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substr(curStrPos).charAt(0);\n    if (curChar === '<' || curChar === '&') {\n      let endTag = '';\n      if (curChar === '<') {\n        endTag = '>';\n      } else {\n        endTag = ';';\n      }\n      while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {\n        curStrPos++;\n        if (curStrPos + 1 > curString.length) {\n          break;\n        }\n      }\n      curStrPos++;\n    }\n    return curStrPos;\n  }\n\n  /**\n   * Backspace HTML tags and HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n  backSpaceHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substr(curStrPos).charAt(0);\n    if (curChar === '>' || curChar === ';') {\n      let endTag = '';\n      if (curChar === '>') {\n        endTag = '<';\n      } else {\n        endTag = '&';\n      }\n      while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {\n        curStrPos--;\n        if (curStrPos < 0) {\n          break;\n        }\n      }\n      curStrPos--;\n    }\n    return curStrPos;\n  }\n}\n\nexport let htmlParser = new HTMLParser();\n"]},"metadata":{},"sourceType":"module"}