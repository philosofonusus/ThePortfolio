{"ast":null,"code":"import _classCallCheck from \"/home/tentacle/Desktop/univers-prod/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tentacle/Desktop/univers-prod/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { initializer } from './initializer.js';\nimport { htmlParser } from './html-parser.js';\n/**\n * Welcome to Typed.js!\n * @param {string} elementId HTML element ID _OR_ HTML element\n * @param {object} options options object\n * @returns {object} a new Typed object\n */\n\nvar Typed = /*#__PURE__*/function () {\n  function Typed(elementId, options) {\n    _classCallCheck(this, Typed);\n\n    // Initialize it up\n    initializer.load(this, options, elementId); // All systems go!\n\n    this.begin();\n  }\n  /**\n   * Toggle start() and stop() of the Typed instance\n   * @public\n   */\n\n\n  _createClass(Typed, [{\n    key: \"toggle\",\n    value: function toggle() {\n      this.pause.status ? this.start() : this.stop();\n    }\n    /**\n     * Stop typing / backspacing and enable cursor blinking\n     * @public\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.typingComplete) return;\n      if (this.pause.status) return;\n      this.toggleBlinking(true);\n      this.pause.status = true;\n      this.options.onStop(this.arrayPos, this);\n    }\n    /**\n     * Start typing / backspacing after being stopped\n     * @public\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (this.typingComplete) return;\n      if (!this.pause.status) return;\n      this.pause.status = false;\n\n      if (this.pause.typewrite) {\n        this.typewrite(this.pause.curString, this.pause.curStrPos);\n      } else {\n        this.backspace(this.pause.curString, this.pause.curStrPos);\n      }\n\n      this.options.onStart(this.arrayPos, this);\n    }\n    /**\n     * Destroy this instance of Typed\n     * @public\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.reset(false);\n      this.options.onDestroy(this);\n    }\n    /**\n     * Reset Typed and optionally restarts\n     * @param {boolean} restart\n     * @public\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var restart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      clearInterval(this.timeout);\n      this.replaceText('');\n\n      if (this.cursor && this.cursor.parentNode) {\n        this.cursor.parentNode.removeChild(this.cursor);\n        this.cursor = null;\n      }\n\n      this.strPos = 0;\n      this.arrayPos = 0;\n      this.curLoop = 0;\n\n      if (restart) {\n        this.insertCursor();\n        this.options.onReset(this);\n        this.begin();\n      }\n    }\n    /**\n     * Begins the typing animation\n     * @private\n     */\n\n  }, {\n    key: \"begin\",\n    value: function begin() {\n      var _this = this;\n\n      this.options.onBegin(this);\n      this.typingComplete = false;\n      this.shuffleStringsIfNeeded(this);\n      this.insertCursor();\n      if (this.bindInputFocusEvents) this.bindFocusEvents();\n      this.timeout = setTimeout(function () {\n        // Check if there is some text in the element, if yes start by backspacing the default message\n        if (!_this.currentElContent || _this.currentElContent.length === 0) {\n          _this.typewrite(_this.strings[_this.sequence[_this.arrayPos]], _this.strPos);\n        } else {\n          // Start typing\n          _this.backspace(_this.currentElContent, _this.currentElContent.length);\n        }\n      }, this.startDelay);\n    }\n    /**\n     * Called for each character typed\n     * @param {string} curString the current string in the strings array\n     * @param {number} curStrPos the current position in the curString\n     * @private\n     */\n\n  }, {\n    key: \"typewrite\",\n    value: function typewrite(curString, curStrPos) {\n      var _this2 = this;\n\n      if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n        this.el.classList.remove(this.fadeOutClass);\n        if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n      }\n\n      var humanize = this.humanizer(this.typeSpeed);\n      var numChars = 1;\n\n      if (this.pause.status === true) {\n        this.setPauseStatus(curString, curStrPos, true);\n        return;\n      } // contain typing function in a timeout humanize'd delay\n\n\n      this.timeout = setTimeout(function () {\n        // skip over any HTML chars\n        curStrPos = htmlParser.typeHtmlChars(curString, curStrPos, _this2);\n        var pauseTime = 0;\n        var substr = curString.substr(curStrPos); // check for an escape character before a pause value\n        // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n        // single ^ are removed from string\n\n        if (substr.charAt(0) === '^') {\n          if (/^\\^\\d+/.test(substr)) {\n            var skip = 1; // skip at least 1\n\n            substr = /\\d+/.exec(substr)[0];\n            skip += substr.length;\n            pauseTime = parseInt(substr);\n            _this2.temporaryPause = true;\n\n            _this2.options.onTypingPaused(_this2.arrayPos, _this2); // strip out the escape character and pause value so they're not printed\n\n\n            curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);\n\n            _this2.toggleBlinking(true);\n          }\n        } // check for skip characters formatted as\n        // \"this is a `string to print NOW` ...\"\n\n\n        if (substr.charAt(0) === '`') {\n          while (curString.substr(curStrPos + numChars).charAt(0) !== '`') {\n            numChars++;\n            if (curStrPos + numChars > curString.length) break;\n          } // strip out the escape characters and append all the string in between\n\n\n          var stringBeforeSkip = curString.substring(0, curStrPos);\n          var stringSkipped = curString.substring(stringBeforeSkip.length + 1, curStrPos + numChars);\n          var stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n          curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n          numChars--;\n        } // timeout for any pause after a character\n\n\n        _this2.timeout = setTimeout(function () {\n          // Accounts for blinking while paused\n          _this2.toggleBlinking(false); // We're done with this sentence!\n\n\n          if (curStrPos >= curString.length) {\n            _this2.doneTyping(curString, curStrPos);\n          } else {\n            _this2.keepTyping(curString, curStrPos, numChars);\n          } // end of character pause\n\n\n          if (_this2.temporaryPause) {\n            _this2.temporaryPause = false;\n\n            _this2.options.onTypingResumed(_this2.arrayPos, _this2);\n          }\n        }, pauseTime); // humanized value for typing\n      }, humanize);\n    }\n    /**\n     * Continue to the next string & begin typing\n     * @param {string} curString the current string in the strings array\n     * @param {number} curStrPos the current position in the curString\n     * @private\n     */\n\n  }, {\n    key: \"keepTyping\",\n    value: function keepTyping(curString, curStrPos, numChars) {\n      // call before functions if applicable\n      if (curStrPos === 0) {\n        this.toggleBlinking(false);\n        this.options.preStringTyped(this.arrayPos, this);\n      } // start typing each new char into existing string\n      // curString: arg, this.el.html: original text inside element\n\n\n      curStrPos += numChars;\n      var nextString = curString.substr(0, curStrPos);\n      this.replaceText(nextString); // loop the function\n\n      this.typewrite(curString, curStrPos);\n    }\n    /**\n     * We're done typing the current string\n     * @param {string} curString the current string in the strings array\n     * @param {number} curStrPos the current position in the curString\n     * @private\n     */\n\n  }, {\n    key: \"doneTyping\",\n    value: function doneTyping(curString, curStrPos) {\n      var _this3 = this;\n\n      // fires callback function\n      this.options.onStringTyped(this.arrayPos, this);\n      this.toggleBlinking(true); // is this the final string\n\n      if (this.arrayPos === this.strings.length - 1) {\n        // callback that occurs on the last typed string\n        this.complete(); // quit if we wont loop back\n\n        if (this.loop === false || this.curLoop === this.loopCount) {\n          return;\n        }\n      }\n\n      this.timeout = setTimeout(function () {\n        _this3.backspace(curString, curStrPos);\n      }, this.backDelay);\n    }\n    /**\n     * Backspaces 1 character at a time\n     * @param {string} curString the current string in the strings array\n     * @param {number} curStrPos the current position in the curString\n     * @private\n     */\n\n  }, {\n    key: \"backspace\",\n    value: function backspace(curString, curStrPos) {\n      var _this4 = this;\n\n      if (this.pause.status === true) {\n        this.setPauseStatus(curString, curStrPos, true);\n        return;\n      }\n\n      if (this.fadeOut) return this.initFadeOut();\n      this.toggleBlinking(false);\n      var humanize = this.humanizer(this.backSpeed);\n      this.timeout = setTimeout(function () {\n        curStrPos = htmlParser.backSpaceHtmlChars(curString, curStrPos, _this4); // replace text with base text + typed characters\n\n        var curStringAtPosition = curString.substr(0, curStrPos);\n\n        _this4.replaceText(curStringAtPosition); // if smartBack is enabled\n\n\n        if (_this4.smartBackspace) {\n          // the remaining part of the current string is equal of the same part of the new string\n          var nextString = _this4.strings[_this4.arrayPos + 1];\n\n          if (nextString && curStringAtPosition === nextString.substr(0, curStrPos)) {\n            _this4.stopNum = curStrPos;\n          } else {\n            _this4.stopNum = 0;\n          }\n        } // if the number (id of character in current string) is\n        // less than the stop number, keep going\n\n\n        if (curStrPos > _this4.stopNum) {\n          // subtract characters one by one\n          curStrPos--; // loop the function\n\n          _this4.backspace(curString, curStrPos);\n        } else if (curStrPos <= _this4.stopNum) {\n          // if the stop number has been reached, increase\n          // array position to next string\n          _this4.arrayPos++; // When looping, begin at the beginning after backspace complete\n\n          if (_this4.arrayPos === _this4.strings.length) {\n            _this4.arrayPos = 0;\n\n            _this4.options.onLastStringBackspaced();\n\n            _this4.shuffleStringsIfNeeded();\n\n            _this4.begin();\n          } else {\n            _this4.typewrite(_this4.strings[_this4.sequence[_this4.arrayPos]], curStrPos);\n          }\n        } // humanized value for typing\n\n      }, humanize);\n    }\n    /**\n     * Full animation is complete\n     * @private\n     */\n\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.options.onComplete(this);\n\n      if (this.loop) {\n        this.curLoop++;\n      } else {\n        this.typingComplete = true;\n      }\n    }\n    /**\n     * Has the typing been stopped\n     * @param {string} curString the current string in the strings array\n     * @param {number} curStrPos the current position in the curString\n     * @param {boolean} isTyping\n     * @private\n     */\n\n  }, {\n    key: \"setPauseStatus\",\n    value: function setPauseStatus(curString, curStrPos, isTyping) {\n      this.pause.typewrite = isTyping;\n      this.pause.curString = curString;\n      this.pause.curStrPos = curStrPos;\n    }\n    /**\n     * Toggle the blinking cursor\n     * @param {boolean} isBlinking\n     * @private\n     */\n\n  }, {\n    key: \"toggleBlinking\",\n    value: function toggleBlinking(isBlinking) {\n      if (!this.cursor) return; // if in paused state, don't toggle blinking a 2nd time\n\n      if (this.pause.status) return;\n      if (this.cursorBlinking === isBlinking) return;\n      this.cursorBlinking = isBlinking;\n\n      if (isBlinking) {\n        this.cursor.classList.add('typed-cursor--blink');\n      } else {\n        this.cursor.classList.remove('typed-cursor--blink');\n      }\n    }\n    /**\n     * Speed in MS to type\n     * @param {number} speed\n     * @private\n     */\n\n  }, {\n    key: \"humanizer\",\n    value: function humanizer(speed) {\n      return Math.round(Math.random() * speed / 2) + speed;\n    }\n    /**\n     * Shuffle the sequence of the strings array\n     * @private\n     */\n\n  }, {\n    key: \"shuffleStringsIfNeeded\",\n    value: function shuffleStringsIfNeeded() {\n      if (!this.shuffle) return;\n      this.sequence = this.sequence.sort(function () {\n        return Math.random() - 0.5;\n      });\n    }\n    /**\n     * Adds a CSS class to fade out current string\n     * @private\n     */\n\n  }, {\n    key: \"initFadeOut\",\n    value: function initFadeOut() {\n      var _this5 = this;\n\n      this.el.className += \" \".concat(this.fadeOutClass);\n      if (this.cursor) this.cursor.className += \" \".concat(this.fadeOutClass);\n      return setTimeout(function () {\n        _this5.arrayPos++;\n\n        _this5.replaceText(''); // Resets current string if end of loop reached\n\n\n        if (_this5.strings.length > _this5.arrayPos) {\n          _this5.typewrite(_this5.strings[_this5.sequence[_this5.arrayPos]], 0);\n        } else {\n          _this5.typewrite(_this5.strings[0], 0);\n\n          _this5.arrayPos = 0;\n        }\n      }, this.fadeOutDelay);\n    }\n    /**\n     * Replaces current text in the HTML element\n     * depending on element type\n     * @param {string} str\n     * @private\n     */\n\n  }, {\n    key: \"replaceText\",\n    value: function replaceText(str) {\n      if (this.attr) {\n        this.el.setAttribute(this.attr, str);\n      } else {\n        if (this.isInput) {\n          this.el.value = str;\n        } else if (this.contentType === 'html') {\n          this.el.innerHTML = str;\n        } else {\n          this.el.textContent = str;\n        }\n      }\n    }\n    /**\n     * If using input elements, bind focus in order to\n     * start and stop the animation\n     * @private\n     */\n\n  }, {\n    key: \"bindFocusEvents\",\n    value: function bindFocusEvents() {\n      var _this6 = this;\n\n      if (!this.isInput) return;\n      this.el.addEventListener('focus', function (e) {\n        _this6.stop();\n      });\n      this.el.addEventListener('blur', function (e) {\n        if (_this6.el.value && _this6.el.value.length !== 0) {\n          return;\n        }\n\n        _this6.start();\n      });\n    }\n    /**\n     * On init, insert the cursor element\n     * @private\n     */\n\n  }, {\n    key: \"insertCursor\",\n    value: function insertCursor() {\n      if (!this.showCursor) return;\n      if (this.cursor) return;\n      this.cursor = document.createElement('span');\n      this.cursor.className = 'typed-cursor';\n      this.cursor.innerHTML = this.cursorChar;\n      this.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n    }\n  }]);\n\n  return Typed;\n}();\n\nexport { Typed as default };","map":{"version":3,"sources":["/home/tentacle/Desktop/univers-prod/node_modules/typed.js/src/typed.js"],"names":["initializer","htmlParser","Typed","elementId","options","load","begin","pause","status","start","stop","typingComplete","toggleBlinking","onStop","arrayPos","typewrite","curString","curStrPos","backspace","onStart","reset","onDestroy","restart","clearInterval","timeout","replaceText","cursor","parentNode","removeChild","strPos","curLoop","insertCursor","onReset","onBegin","shuffleStringsIfNeeded","bindInputFocusEvents","bindFocusEvents","setTimeout","currentElContent","length","strings","sequence","startDelay","fadeOut","el","classList","contains","fadeOutClass","remove","humanize","humanizer","typeSpeed","numChars","setPauseStatus","typeHtmlChars","pauseTime","substr","charAt","test","skip","exec","parseInt","temporaryPause","onTypingPaused","substring","stringBeforeSkip","stringSkipped","stringAfterSkip","doneTyping","keepTyping","onTypingResumed","preStringTyped","nextString","onStringTyped","complete","loop","loopCount","backDelay","initFadeOut","backSpeed","backSpaceHtmlChars","curStringAtPosition","smartBackspace","stopNum","onLastStringBackspaced","onComplete","isTyping","isBlinking","cursorBlinking","add","speed","Math","round","random","shuffle","sort","className","fadeOutDelay","str","attr","setAttribute","isInput","value","contentType","innerHTML","textContent","addEventListener","e","showCursor","document","createElement","cursorChar","insertBefore","nextSibling"],"mappings":"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","sourcesContent":["import { initializer } from './initializer.js';\nimport { htmlParser } from './html-parser.js';\n\n/**\n * Welcome to Typed.js!\n * @param {string} elementId HTML element ID _OR_ HTML element\n * @param {object} options options object\n * @returns {object} a new Typed object\n */\nexport default class Typed {\n  constructor(elementId, options) {\n    // Initialize it up\n    initializer.load(this, options, elementId);\n    // All systems go!\n    this.begin();\n  }\n\n  /**\n   * Toggle start() and stop() of the Typed instance\n   * @public\n   */\n  toggle() {\n    this.pause.status ? this.start() : this.stop();\n  }\n\n  /**\n   * Stop typing / backspacing and enable cursor blinking\n   * @public\n   */\n  stop() {\n    if (this.typingComplete) return;\n    if (this.pause.status) return;\n    this.toggleBlinking(true);\n    this.pause.status = true;\n    this.options.onStop(this.arrayPos, this);\n  }\n\n  /**\n   * Start typing / backspacing after being stopped\n   * @public\n   */\n  start() {\n    if (this.typingComplete) return;\n    if (!this.pause.status) return;\n    this.pause.status = false;\n    if (this.pause.typewrite) {\n      this.typewrite(this.pause.curString, this.pause.curStrPos);\n    } else {\n      this.backspace(this.pause.curString, this.pause.curStrPos);\n    }\n    this.options.onStart(this.arrayPos, this);\n  }\n\n  /**\n   * Destroy this instance of Typed\n   * @public\n   */\n  destroy() {\n    this.reset(false);\n    this.options.onDestroy(this);\n  }\n\n  /**\n   * Reset Typed and optionally restarts\n   * @param {boolean} restart\n   * @public\n   */\n  reset(restart = true) {\n    clearInterval(this.timeout);\n    this.replaceText('');\n    if (this.cursor && this.cursor.parentNode) {\n      this.cursor.parentNode.removeChild(this.cursor);\n      this.cursor = null;\n    }\n    this.strPos = 0;\n    this.arrayPos = 0;\n    this.curLoop = 0;\n    if (restart) {\n      this.insertCursor();\n      this.options.onReset(this);\n      this.begin();\n    }\n  }\n\n  /**\n   * Begins the typing animation\n   * @private\n   */\n  begin() {\n    this.options.onBegin(this);\n    this.typingComplete = false;\n    this.shuffleStringsIfNeeded(this);\n    this.insertCursor();\n    if (this.bindInputFocusEvents) this.bindFocusEvents();\n    this.timeout = setTimeout(() => {\n      // Check if there is some text in the element, if yes start by backspacing the default message\n      if (!this.currentElContent || this.currentElContent.length === 0) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      } else {\n        // Start typing\n        this.backspace(this.currentElContent, this.currentElContent.length);\n      }\n    }, this.startDelay);\n  }\n\n  /**\n   * Called for each character typed\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  typewrite(curString, curStrPos) {\n    if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n      this.el.classList.remove(this.fadeOutClass);\n      if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n    }\n\n    const humanize = this.humanizer(this.typeSpeed);\n    let numChars = 1;\n\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n\n    // contain typing function in a timeout humanize'd delay\n    this.timeout = setTimeout(() => {\n      // skip over any HTML chars\n      curStrPos = htmlParser.typeHtmlChars(curString, curStrPos, this);\n\n      let pauseTime = 0;\n      let substr = curString.substr(curStrPos);\n      // check for an escape character before a pause value\n      // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n      // single ^ are removed from string\n      if (substr.charAt(0) === '^') {\n        if (/^\\^\\d+/.test(substr)) {\n          let skip = 1; // skip at least 1\n          substr = /\\d+/.exec(substr)[0];\n          skip += substr.length;\n          pauseTime = parseInt(substr);\n          this.temporaryPause = true;\n          this.options.onTypingPaused(this.arrayPos, this);\n          // strip out the escape character and pause value so they're not printed\n          curString =\n            curString.substring(0, curStrPos) +\n            curString.substring(curStrPos + skip);\n          this.toggleBlinking(true);\n        }\n      }\n\n      // check for skip characters formatted as\n      // \"this is a `string to print NOW` ...\"\n      if (substr.charAt(0) === '`') {\n        while (curString.substr(curStrPos + numChars).charAt(0) !== '`') {\n          numChars++;\n          if (curStrPos + numChars > curString.length) break;\n        }\n        // strip out the escape characters and append all the string in between\n        const stringBeforeSkip = curString.substring(0, curStrPos);\n        const stringSkipped = curString.substring(\n          stringBeforeSkip.length + 1,\n          curStrPos + numChars\n        );\n        const stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n        curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n        numChars--;\n      }\n\n      // timeout for any pause after a character\n      this.timeout = setTimeout(() => {\n        // Accounts for blinking while paused\n        this.toggleBlinking(false);\n\n        // We're done with this sentence!\n        if (curStrPos >= curString.length) {\n          this.doneTyping(curString, curStrPos);\n        } else {\n          this.keepTyping(curString, curStrPos, numChars);\n        }\n        // end of character pause\n        if (this.temporaryPause) {\n          this.temporaryPause = false;\n          this.options.onTypingResumed(this.arrayPos, this);\n        }\n      }, pauseTime);\n\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Continue to the next string & begin typing\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  keepTyping(curString, curStrPos, numChars) {\n    // call before functions if applicable\n    if (curStrPos === 0) {\n      this.toggleBlinking(false);\n      this.options.preStringTyped(this.arrayPos, this);\n    }\n    // start typing each new char into existing string\n    // curString: arg, this.el.html: original text inside element\n    curStrPos += numChars;\n    const nextString = curString.substr(0, curStrPos);\n    this.replaceText(nextString);\n    // loop the function\n    this.typewrite(curString, curStrPos);\n  }\n\n  /**\n   * We're done typing the current string\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  doneTyping(curString, curStrPos) {\n    // fires callback function\n    this.options.onStringTyped(this.arrayPos, this);\n    this.toggleBlinking(true);\n    // is this the final string\n    if (this.arrayPos === this.strings.length - 1) {\n      // callback that occurs on the last typed string\n      this.complete();\n      // quit if we wont loop back\n      if (this.loop === false || this.curLoop === this.loopCount) {\n        return;\n      }\n    }\n    this.timeout = setTimeout(() => {\n      this.backspace(curString, curStrPos);\n    }, this.backDelay);\n  }\n\n  /**\n   * Backspaces 1 character at a time\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  backspace(curString, curStrPos) {\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n    if (this.fadeOut) return this.initFadeOut();\n\n    this.toggleBlinking(false);\n    const humanize = this.humanizer(this.backSpeed);\n\n    this.timeout = setTimeout(() => {\n      curStrPos = htmlParser.backSpaceHtmlChars(curString, curStrPos, this);\n      // replace text with base text + typed characters\n      const curStringAtPosition = curString.substr(0, curStrPos);\n      this.replaceText(curStringAtPosition);\n\n      // if smartBack is enabled\n      if (this.smartBackspace) {\n        // the remaining part of the current string is equal of the same part of the new string\n        let nextString = this.strings[this.arrayPos + 1];\n        if (\n          nextString &&\n          curStringAtPosition === nextString.substr(0, curStrPos)\n        ) {\n          this.stopNum = curStrPos;\n        } else {\n          this.stopNum = 0;\n        }\n      }\n\n      // if the number (id of character in current string) is\n      // less than the stop number, keep going\n      if (curStrPos > this.stopNum) {\n        // subtract characters one by one\n        curStrPos--;\n        // loop the function\n        this.backspace(curString, curStrPos);\n      } else if (curStrPos <= this.stopNum) {\n        // if the stop number has been reached, increase\n        // array position to next string\n        this.arrayPos++;\n        // When looping, begin at the beginning after backspace complete\n        if (this.arrayPos === this.strings.length) {\n          this.arrayPos = 0;\n          this.options.onLastStringBackspaced();\n          this.shuffleStringsIfNeeded();\n          this.begin();\n        } else {\n          this.typewrite(this.strings[this.sequence[this.arrayPos]], curStrPos);\n        }\n      }\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Full animation is complete\n   * @private\n   */\n  complete() {\n    this.options.onComplete(this);\n    if (this.loop) {\n      this.curLoop++;\n    } else {\n      this.typingComplete = true;\n    }\n  }\n\n  /**\n   * Has the typing been stopped\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @param {boolean} isTyping\n   * @private\n   */\n  setPauseStatus(curString, curStrPos, isTyping) {\n    this.pause.typewrite = isTyping;\n    this.pause.curString = curString;\n    this.pause.curStrPos = curStrPos;\n  }\n\n  /**\n   * Toggle the blinking cursor\n   * @param {boolean} isBlinking\n   * @private\n   */\n  toggleBlinking(isBlinking) {\n    if (!this.cursor) return;\n    // if in paused state, don't toggle blinking a 2nd time\n    if (this.pause.status) return;\n    if (this.cursorBlinking === isBlinking) return;\n    this.cursorBlinking = isBlinking;\n    if (isBlinking) {\n      this.cursor.classList.add('typed-cursor--blink');\n    } else {\n      this.cursor.classList.remove('typed-cursor--blink');\n    }\n  }\n\n  /**\n   * Speed in MS to type\n   * @param {number} speed\n   * @private\n   */\n  humanizer(speed) {\n    return Math.round((Math.random() * speed) / 2) + speed;\n  }\n\n  /**\n   * Shuffle the sequence of the strings array\n   * @private\n   */\n  shuffleStringsIfNeeded() {\n    if (!this.shuffle) return;\n    this.sequence = this.sequence.sort(() => Math.random() - 0.5);\n  }\n\n  /**\n   * Adds a CSS class to fade out current string\n   * @private\n   */\n  initFadeOut() {\n    this.el.className += ` ${this.fadeOutClass}`;\n    if (this.cursor) this.cursor.className += ` ${this.fadeOutClass}`;\n    return setTimeout(() => {\n      this.arrayPos++;\n      this.replaceText('');\n\n      // Resets current string if end of loop reached\n      if (this.strings.length > this.arrayPos) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], 0);\n      } else {\n        this.typewrite(this.strings[0], 0);\n        this.arrayPos = 0;\n      }\n    }, this.fadeOutDelay);\n  }\n\n  /**\n   * Replaces current text in the HTML element\n   * depending on element type\n   * @param {string} str\n   * @private\n   */\n  replaceText(str) {\n    if (this.attr) {\n      this.el.setAttribute(this.attr, str);\n    } else {\n      if (this.isInput) {\n        this.el.value = str;\n      } else if (this.contentType === 'html') {\n        this.el.innerHTML = str;\n      } else {\n        this.el.textContent = str;\n      }\n    }\n  }\n\n  /**\n   * If using input elements, bind focus in order to\n   * start and stop the animation\n   * @private\n   */\n  bindFocusEvents() {\n    if (!this.isInput) return;\n    this.el.addEventListener('focus', (e) => {\n      this.stop();\n    });\n    this.el.addEventListener('blur', (e) => {\n      if (this.el.value && this.el.value.length !== 0) {\n        return;\n      }\n      this.start();\n    });\n  }\n\n  /**\n   * On init, insert the cursor element\n   * @private\n   */\n  insertCursor() {\n    if (!this.showCursor) return;\n    if (this.cursor) return;\n    this.cursor = document.createElement('span');\n    this.cursor.className = 'typed-cursor';\n    this.cursor.innerHTML = this.cursorChar;\n    this.el.parentNode &&\n      this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}